#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2014             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.


def inventory_fsc_fans(info):
    return [ (line[0], line[1], (int(line[1]) * 0.9, int(line[1]) * 0.8)) for line in info if int(line[1]) > 0 ]

def check_fsc_fans(item, params, info):
    if type(params) == tuple:
        low_warn, low_crit = params
        up_warn, up_crit = None, None
    else:
        low_warn, low_crit = params['lower']
        up_warn, up_crit = params.get('upper', ( None, None))

    for line in info: # , value1, value2 in info:
        name = line[0]
        if name != item: continue
        rpm = int(line[1])

        perfdata = [ ( 'rpm', rpm, low_warn, low_crit, 0 ) ]
        infotext = "%d RPM" % rpm
        levels = "Warn/Crit Lower: %d/%d " % (low_warn, low_crit )
        if up_crit:
            levels +=  "Upper: %d/%d" % ( up_warn, up_crit )
        if rpm < low_crit or (up_crit and rpm > up_crit):
            return 2, infotext + levels, perfdata
        elif rpm < low_warn or (up_warn and rpm > up_warn):
            return 1, infotext + levels, perfdata
        else:
            return 0, infotext, perfdata

    return (3, "FAN %s not found in SNMP data" % item)


check_info["fsc_fans"] = {
    'check_function':          check_fsc_fans,
    'inventory_function':      inventory_fsc_fans,
    'group':                   "hw_fans",
    'service_description':     'FSC %s',
    'has_perfdata':            True,
    'snmp_info':               ('.1.3.6.1.4.1.231.2.10.2.2.5.2.2.1', [16, 8]),
    'snmp_scan_function':      lambda oid: \
     oid(".1.3.6.1.4.1.231.2.10.2.1.1.0"),
}
