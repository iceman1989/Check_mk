#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2014             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.


def fahrenheit_to_celsius(tempf):
    return (float(tempf) - 32) * (5.0 / 9.0)

def celsius_to_fahrenheit(tempc):
    return (float(tempc) * (9.0 / 5.0)) + 32


# Checks Celsius temperature against crit/warn levels defined in params. temp must
# be int or float

def check_temperature(temp, params, dev_unit = "c"):

    def tostring(temp):
        if type(temp) == int:
            return "%d" % temp
        else:
            return "%.1f" % temp

    def outtemp(tempc, output_unit):
        if output_unit == "f":
            return celsius_to_fahrenheit(tempc)
        elif output_unit == "k":
            return tempc + 273.15
        else:
            return tempc

    unitsym = {
        "c": "°C",
        "f": "°F",
        "k": "K",
    }

    if type(params) == tuple:
        params = { "levels" : params }
    elif params == None:
        params = {}

    input_unit = params.get("input_unit", dev_unit)
    output_unit = params.get("output_unit", "c")

    if input_unit == "f":
        temp = fahrenheit_to_celsius(temp)
    if input_unit == "k":
        temp = temp - 273.15

    if type(params) == dict:
        warn, crit = params.get("levels", (None, None))
        warnl, critl = params.get("levels_lower", (None, None))
        perfdata = [ ("temp", temp, warn, crit, warnl, critl) ]
        infotext = "%s %s" % (tostring(outtemp(temp, output_unit)), unitsym[output_unit])
        levelstext = ""
        levelstext_lower = ""
        if warn != None and crit != None:
            levelstext = " (warn/crit at %s/%s %s)" % (
                tostring(outtemp(warn, output_unit)),
                tostring(outtemp(crit, output_unit)),
                unitsym[output_unit])
        if warnl != None and critl != None:
            levelstext_lower = " (warn/crit below %s/%s %s)" % (
                tostring(outtemp(warnl, output_unit)),
                tostring(outtemp(critl, output_unit)),
                unitsym[output_unit])

        if crit != None and temp >= crit:
            status = 2
            infotext += levelstext
        elif critl != None and temp < critl:
            status = 2
            infotext += levelstext_lower

        elif warn != None and temp >= warn:
            status = 1
            infotext += levelstext
        elif warnl != None and temp < warnl:
            status = 1
            infotext += levelstext_lower

        else:
            status = 0

    return status, infotext, perfdata
