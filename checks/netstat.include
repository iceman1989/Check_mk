#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2014             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

# Item is a user defined identifier of the connection.
# Example for params:
# {
#    "proto"       : "UDP",
#    "local_ip"    : "10.1.1.99",
#    "remote_port" : 5665,
#    "state"       : "ESTABLISHED",
# }
# Other keys: local_port, remote_ip. Missing entries do not care.


def check_netstat_generic(item, params, connections):
    found = 0
    for proto, (local_ip, local_port), (remote_ip, remote_port), connstate in connections:
        # Beware: port numbers are strings here.
        match = True
        for k, v in [
            ( "local_ip",    local_ip ),
            ( "local_port",  local_port ),
            ( "remote_ip",   remote_ip ),
            ( "remote_port", remote_port ),
            ( "proto",       proto ),
            ( "state",       connstate )]:
            if k in params and str(params[k]) != v:
                match = False
                break
        if match:
            found += 1

    # Check if found connections are within limits
    yield 0, "Found %d matching entries" % found

    if params.get("min_states"):
        min_warn, min_crit = params["min_states"]
        if found <= min_crit:
            state = 2
        elif found <= min_warn:
            state = 1
        else:
            state = 0
        if state:
            yield state, "too few (warn/crit at %d/%d)" % (min_warn, min_crit)

    if params.get("max_states"):
        max_warn, max_crit = params["max_states"]
        if found >= max_crit:
            state = 2
        elif found >= max_warn:
            state = 1
        else:
            state = 0
        if state:
            yield state, "too many (warn/crit at %d/%d)" % (max_warn, max_crit)

