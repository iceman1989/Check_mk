#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2014             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.


#   +----------------------------------------------------------------------+
#   |                                                        _             |
#   |           _ __ ___   ___ _ __ ___   _   _ ___  ___  __| |            |
#   |          | '_ ` _ \ / _ \ '_ ` _ \ | | | / __|/ _ \/ _` |            |
#   |          | | | | | |  __/ | | | | || |_| \__ \  __/ (_| |            |
#   |          |_| |_| |_|\___|_| |_| |_(_)__,_|___/\___|\__,_|            |
#   |                                                                      |
#   +----------------------------------------------------------------------+
#   | Memory check that takes into account the swap space. This check is   |
#   | used for unixoide operating systems.                                 |
#   +----------------------------------------------------------------------+

# The following variable is obsolete. It is kept here so that Check_MK
# won't fail if it's found in main.mk
mem_extended_perfdata = None

def parse_proc_meminfo(info):
    return dict([ (i[0][:-1], int(i[1])) for i in info ])

def inventory_mem_used(info):
    meminfo = parse_proc_meminfo(info)
    if "MemTotal" in meminfo and \
        "PageTotal" not in meminfo: # This case is handled by mem.win
        return [(None, {})]

def check_mem_used(_no_item, params, info):
    meminfo = parse_proc_meminfo(info)
    return check_memory(params, meminfo)

check_info['mem.used'] = {
    "check_function"          : check_mem_used,
    "inventory_function"      : inventory_mem_used,
    "service_description"     : "Memory used",
    "has_perfdata"            : True,
    "group"                   : "memory",
    "default_levels_variable" : "memory_default_levels",
    "includes"                : [ "mem.include" ],
}


#   +----------------------------------------------------------------------+
#   |                                                _                     |
#   |              _ __ ___   ___ _ __ ___ __      _(_)_ __                |
#   |             | '_ ` _ \ / _ \ '_ ` _ \\ \ /\ / / | '_ \               |
#   |             | | | | | |  __/ | | | | |\ V  V /| | | | |              |
#   |             |_| |_| |_|\___|_| |_| |_(_)_/\_/ |_|_| |_|              |
#   |                                                                      |
#   +----------------------------------------------------------------------+
#   | Windows now has a dedicated memory check that reflect the special    |
#   | nature of the page file.                                             |
#   +----------------------------------------------------------------------+

# Special memory and page file check for Windows
factory_settings["memory_win_default_levels"] = {
    "memory"   : ( 80.0, 90.0 ),
    "pagefile" : ( 80.0, 90.0 ),
}

def inventory_mem_win(info):
    meminfo = parse_proc_meminfo(info)
    if "MemTotal" in meminfo and "PageTotal" in meminfo:
        return [(None, {})]

def check_mem_windows(item, params, info):
    meminfo = parse_proc_meminfo(info)
    MB = 1024.0 * 1024
    now = time.time()

    for title, what, paramname in [
        ( "Memory",    "Mem",  "memory" ),
        ( "Page file", "Page", "pagefile" )]:
        total_kb = meminfo[what + "Total"]
        free_kb  = meminfo[what + "Free"]
        used_kb  = total_kb - free_kb
        used_mb  = used_kb / 1024.0
        free_mb  = free_kb / 1024.0
        perc     = 100.0 * used_kb / total_kb

        infotext = "%s usage: %.1f%% (%.1f/%.1f GB)" % \
                (title, perc, used_kb / MB, total_kb / MB)

        if type(params[paramname]) == tuple:
            warn, crit = params[paramname]

            # In perfdata show warn/crit as absolute values
            if type(warn) == float:
                warn_kb = total_kb * warn / 100 / 1024
            else:
                warn_kb = warn * 1024

            if type(crit) == float:
                crit_kb = total_kb * crit / 100 / 1024
            else:
                crit_kb = crit * 1024

            perfdata = [(paramname, used_kb / 1024.0, warn_kb, crit_kb, 0, total_kb / 1024.0)]

        # Predictive levels have no level information in the performance data
        else:
            perfdata = [(paramname, used_kb / 1024.0, None, None, 0, total_kb / 1024.0)]

        # Do averaging, if configured, just for matching the levels
        if "average" in params:
            average_min = params["average"]
            used_kb = get_average("mem.win.%s" % paramname,
                                           now, used_kb, average_min, initialize_zero = False)
            used_mb  = used_kb / 1024.0
            free_mb  = (total_kb / 1024.0) - used_mb
            perc     = 100.0 * used_kb / total_kb
            infotext += ", %d min average: %.1f%% (%.1f GB)" % (average_min, perc, used_kb / MB)
            perfdata.append((paramname + "_avg", used_kb / 1024.0))

        # Now check the levels
        if type(params[paramname]) == tuple:
            if (type(crit) == int and free_mb <= crit) or \
                (type(crit) == float and perc >= crit):
                state = 2
            elif (type(warn) == int and free_mb <= warn) or \
                (type(warn) == float and perc >= warn):
                state = 1
            else:
                state = 0

        # Predictive levels
        else:
            state, infoadd, perfadd = check_levels(
                used_kb / 1024.0,                                            # Current value stored in MB in RRDs
                "average" in params and paramname + "_avg" or paramname,     # Name of RRD variable
                params[paramname],
                unit = "GB",                                                 # Levels are specified in GB...
                scale = 1024,                                                # ... in WATO ValueSpec
            )
            if infoadd:
                infotext += ", " + infoadd
            perfdata += perfadd

        yield state, infotext, perfdata


check_info["mem.win"] = {
    'check_function':          check_mem_windows,
    'inventory_function':      inventory_mem_win,
    'service_description':     'Memory and pagefile',
    'has_perfdata':            True,
    'group':                   'memory_pagefile_win',
    'default_levels_variable': 'memory_win_default_levels',
}

#   +----------------------------------------------------------------------+
#   |                                                   _ _                |
#   |    _ __ ___   ___ _ __ ___ __   ___ __ ___   __ _| | | ___   ___     |
#   |   | '_ ` _ \ / _ \ '_ ` _ \\ \ / / '_ ` _ \ / _` | | |/ _ \ / __|    |
#   |   | | | | | |  __/ | | | | |\ V /| | | | | | (_| | | | (_) | (__     |
#   |   |_| |_| |_|\___|_| |_| |_(_)_/ |_| |_| |_|\__,_|_|_|\___/ \___|    |
#   |                                                                      |
#   +----------------------------------------------------------------------+
#   | This very specific check checks the usage and fragmentation of the   |
#   | address space 'vmalloc' that can be problematic on 32-Bit systems.   |
#   +----------------------------------------------------------------------+

# warn, crit, warn_chunk, crit_chunk. Integers are in MB, floats are in percent
mem_vmalloc_default_levels = ( 80.0, 90.0, 64, 32 )

def inventory_mem_vmalloc(info):
    meminfo = parse_proc_meminfo(info)
    if "VmallocTotal" in meminfo:
        # Do not checks this on 64 Bit systems. They have almost
        # infinitive vmalloc
        vmalloc = meminfo["VmallocTotal"] / 1024.4
        if vmalloc < 4096:
            return [ (None, "mem_vmalloc_default_levels") ]
    return []

def check_mem_vmalloc(item, params, info):
    meminfo = parse_proc_meminfo(info)
    total_mb = meminfo["VmallocTotal"] / 1024.0
    used_mb  = meminfo["VmallocUsed"] / 1024.0
    free_mb  = total_mb - used_mb
    chunk_mb = meminfo["VmallocChunk"] / 1024.0
    warn, crit, warn_chunk, crit_chunk = params

    state = 0
    infotxts = []
    perfdata = []
    for var, w, c, v, neg, what in [
        ( "used",  warn,       crit,       used_mb,  False, "used" ),
        ( "chunk", warn_chunk, crit_chunk, chunk_mb, True,  "largest chunk" )]:

        # convert levels from percentage to MB values
        if type(w) == float:
            w_mb = total_mb * w / 100
        else:
            w_mb = float(w)

        if type(c) == float:
            c_mb = total_mb * c / 100
        else:
            c_mb = float(c)

        infotxt = "%s %.1f MB" % (what, v)
        if (v >= c_mb) != neg:
            s = 2
            infotxt += " (critical at %.1f MB!!)" % c_mb
        elif (v >= w_mb) != neg:
            s = 1
            infotxt += " (warning at %.1f MB!)" % w_mb
        else:
            s = 0
        state = max(state, s)
        infotxts.append(infotxt)
        perfdata.append( (var, v, w_mb, c_mb, 0, total_mb) )
    return (state, ("total %.1f MB, " % total_mb) + ", ".join(infotxts), perfdata)

check_info["mem.vmalloc"] = {
    'check_function':          check_mem_vmalloc,
    'inventory_function':      inventory_mem_vmalloc,
    'service_description':     'Vmalloc address space',
    'has_perfdata':            True,
}
