#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2014             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

def inventory_hitachi_hnas_temp(info):
    inventory = []
    for clusternode, id, status, temp in info:
        inventory.append( (clusternode + "." + id, None) )
    return inventory

def check_hitachi_hnas_temp(item, _no_params, info):
    temp_status_map = ( ("", 3),                  # 0
                        ("ok", 0),                # 1
                        ("tempWarning", 1),       # 2
                        ("tempSevere", 2),        # 3
                        ("tempSensorFailed", 2),  # 4
                        ("tempSensorWarning", 1), # 5
                        ("unknown", 3),           # 6
                      )

    for clusternode, id, status, temp in info:
        if clusternode + "." + id == item:
            status=int(status)
            temp=int(temp)

            if status == 0 or status >= len(temp_status_map):
                return 3, "PNode %s Sensor %s reported unidentified status %s" % (clusternode, id, status)
            else:
                perfdata = [ ('temp', str(temp) + 'C') ]
                return temp_status_map[status][1], "PNode %s Sensor %s reported status %s, temperature is %s Â°C" % (clusternode, id, temp_status_map[status][0], temp), perfdata
    return 3, "No sensor PNode %s Sensor %s found" % (clusternode, id)

check_info["hitachi_hnas_temp"] = {
    "check_function"        : check_hitachi_hnas_temp,
    "inventory_function"    : inventory_hitachi_hnas_temp,
    "service_description"   : "Temperature %s",
    "has_perfdata"          : True,
    "snmp_info"             : (".1.3.6.1.4.1.11096.6.1.1.1.2.1.9.1", [1, 2, 3, 4]),
                              # temperatureSensorClusterNode, temperatureSensorIndex, temperatureSensorStatus, temperatureSensorCReading
    "snmp_scan_function"    : lambda oid: oid(".1.3.6.1.2.1.1.2.0").startswith(".1.3.6.1.4.1.11096.6"),
}
