Title: Checkboxen zum Auswählen von Einträgen für Kommandos
Component: multisite
Class: feature
State: done
Date: 2010-12-21 22:01:48
Targetversion: future

Checkboxen: Bei einer View macht man oben einen kleinen Reiter, der eine
Checkbox symbolisiert. Wenn man den anklickt, wir bei jedem Datensatz
zusätzlich eine Checkbox angezeigt. Das wird als Viewoption persistiert und
auch general als Layout-Parameter angeboten. Wenn die Checkboxen sichtbar sind,
werden Kommandos nur noch auf die Datensätze angewandt, welche mit einem
Kreuz markiert sind. Zur Steigerung des Bedienkomforts gibt es einen Knopf,
mit dem man alle Boxen markieren oder leeren kann (evtl. kann man das auch
darüber regeln, dass der Reiter oben nicht zwei, sondern drei Zustände
hat: Checkboxen aus, Checkboxen alle gecheckt, Checkboxen alle leer).
Damit die Checkboxen funktionieren, muss jeder Datensatz eine eindeutige ID
erzeugen können. Dazu gibt es bei jeder Datasource die Information, welche
Spalten das sind. Aktuell gibt es dazu schon "keys". Problem hier ist nur,
dass da noch die Downtime-IDs mitkommen, die man hier nicht braucht. Diese
sollte man irgendwie weglassen können.  Die Checkbox bekommt also also
HTML-Variablennamen die jeweilige ID - irgendwie enkodiert so dass es
keine Probleme mit Sonderzeichen gibt.  Wenn die Schleife der Kommandos
ausgeführt wird, muss ich jeweils noch kontrollieren, ob der Datensatz,
um den es gerade geht, auch gecheckt ist (oder Checkboxen generell aus
sind). Wenn Kein Datensatz gewählt wurde, spucke ich eine Fehlermeldung aus.

Checkboxen(2): [1] Neuer Reiter mit drei Zuständen: keine Checkboxen
alle gecheckt, alle leer. Der Zustand wird als viewoption persistent und
auch bei der View als Parameter eingebaut, so dass der Admin einen Default
vorgeben kann. Evtl. kann die View auch festlegen, ob überhaupt ein Reiter
kommt. [2] Beim Anzeigen eines Layouts muss diese eine extra TD malen,
welches eine Checkbox enthält (wenn der Reiter sichtbar ist).  Der Name der
Checkbox muss über eine eindeutige Zeilen-ID bestimmt sein.  und man muss -
nach der Tabelle - ein eine Javascript-Funktion ausgeben, die das Umschalten
der über das Tab regelt - alle an / alle aus, umschalten.  Das muss dann
per Ajax auch die View-Option umstellen und die Optik des Tabs ändern. Wenn
man auf unsichtbar schaltet, müssen alle Boxen auf gecheckt gesetzt werden,
damit das Kommando auch wirklich auf allen ausgeführt wird. [3] Wenn man
jetzt auf ein Kommando klickt, muss ich bei jedem Datensatz wieder die ID
berechnen. Dann schauen, ob es eine Check-Variable gibt. Falls ja, muss
diese auf "on" stehen, damit das Kommando ausgeführt wird.  Wenn keines
gewält ist, soll ein Hinweis kommen (gelb).

Checkboxen(3): Jetzt ist mir noch eine Idee für die Implementierung
gekommen. Man könnte die Checkboxen anstellen von HTML-Formularen
mit Icons machen wie sie bei den BI assumed states verwendet werden.
Also per Ajax die angecheckten Dinge in einer Datei persistieren.
Die Implementierung wäre sehr einfach. Und die Häckchen bleiben für
spätere Zwecke auch da. Wenn man eine Aktion auslöst, müsste diese
einfach nur noch bei jeder Zeile prüfen, ob das Item gecheckt ist.
Die Aktionen uncheck all entfernt dann einfach alle Häckchen, die
in der aktuellen View sichtbar sind. Wichtig ist allerdings hier
umsomehr: Wenn mehrere Leute mit dem gleichen Account arbeiten, wirds
gefährlich. Kann man ein Browserfenster identifizieren und evtl.
transid und Checkboxen relativ zum Browserfenster machen???
Evtl. könnte man in ein Formular eine zufällige ID einkodieren
und mit der transid nur noch prüfen, ob dieses Formular bereits
abgeschickt wurde? Man würde dann pro Benutzer mehrere Transids
speichern.


2012-10-04 12:33:06: changed state open -> done
Das ist schon länger umgesetzt.
