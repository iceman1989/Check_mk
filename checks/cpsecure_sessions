#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2014             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

# Example for info:
# [['HTTP',  '1', '1682'],
#  ['SMTP',  '1', '216'],
#  ['POP3',  '1', '0'],
#  ['FTP',   '1', '1'],
#  ['HTTPS', '2', '0'],
#  ['IMAP',  '1', '48']]

cpsecure_sessions_default_levels = ( 2500, 5000 )

def inventory_cpsecure_sessions(info):
    inventory = []
    for service, enabled, sessions in info:
        if enabled == '1':
            inventory.append( (service, "cpsecure_sessions_default_levels") )
    return inventory

def check_cpsecure_sessions(item, params, info):
    for service, enabled, sessions in info:
        if item == service:
            if enabled != '1':
                return (1, "service not enabled")
            num_sessions = int(sessions)
            warn, crit = params
            perfdata = [ ("sessions", num_sessions, warn, crit, 0 ) ]

            if num_sessions >= crit:
                return (2, "%s sessions (critical at %d)" % (sessions, crit), perfdata)
            elif num_sessions >= warn:
                return (1, "%s sessions (warning at %d)" % (sessions, warn), perfdata)
            else:
                return (0, "%s sessions" % sessions, perfdata)

    return (3, "service not found")




check_info["cpsecure_sessions"] = {
    'check_function':          check_cpsecure_sessions,
    'inventory_function':      inventory_cpsecure_sessions,
    'service_description':     'Number of %s sessions',
    'has_perfdata':            True,
    'snmp_info':               ('.1.3.6.1.4.1.26546.3.1.2.1.1.1', ['1', '2', '3']),
    'snmp_scan_function':      \
     lambda oid: oid(".1.3.6.1.2.1.1.2.0") == ".1.3.6.1.4.1.26546.1.1.2",
}
