#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2014             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

def parse_casa_info_util(info):
    entity_names = dict(map(lambda x: [int(x[0]), x[1]], info[0]))
    data = {}
    for entry in info[1]:
        entry_nr = int(entry[0])
        name = entity_names[entry_nr] # e.g. "Module 1 QEM".
        # Drop "QEM" in order to be consistent with other DTCS checks...
        if name.startswith("Module "):
            name = name.rsplit(None, 1)[0]
        data[name] = {
            "cpu_util" : entry[1],
        }
    return data

def inventory_casa_cpu_util(info):
    data = parse_casa_info_util(info)
    inventory = []
    for key, value in data.items():
        if value.get("cpu_util"):
            inventory.append( (key, {}) )
    return inventory

def check_casa_cpu_util(item, params, info):
    data = parse_casa_info_util(info)
    if item in data:
        state = 0
        value  = int(data[item]["cpu_util"])
        levels_text = ""
        error_text  = ""
        warn, crit = None, None
        if "levels" in params:
            warn, crit = params["levels"]
            levels_text = "(levels at %s%%/%s%%)" % (warn, crit)
            if value > crit:
                state = 2
            elif value > warn:
                state = 1
            else:
                levels_text = ""
        infotext = "%d%% %s%s" % (value, error_text, levels_text)
        perfdata = [ ("util", value, warn, crit, 0, 100) ]
        return (state, infotext, perfdata)
    else:
        return 3, "%s not found in SNMP output" % item


check_info["casa_cpu_util"] = {
    "check_function"        : check_casa_cpu_util,
    "inventory_function"    : inventory_casa_cpu_util,
    "service_description"   : "CPU utilization %s",
    "has_perfdata"          : True,
    "group"                 : "cpu_utilization_multiitem",
    "snmp_scan_function"    : lambda oid: oid(".1.3.6.1.2.1.1.2.0").startswith(".1.3.6.1.4.1.20858.2."),
    "snmp_info"             : [
               ( ".1.3.6.1.2.1.47.1.1.1.1.2",        [ OID_END, '' ] ), # Entity descriptions, quite long...
               ( ".1.3.6.1.4.1.20858.10.13.1.1.1.4", [ OID_END, '' ] ), # CPU utilization
                              ]
}
