#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2014             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

juniper_cpu_default_levels = ( 80.0, 90.0 )

def inventory_juniper_cpu(info):
    return [ (x[0], "juniper_cpu_default_levels" ) for x in info if x[0].startswith("Routing Engine") ]

def check_juniper_cpu(item, params, info):
    for line in info:
       if line[0] == item:
           util1, util5, util15 = map(int,line[1:])
           warn, crit = params
           label1, label5, label15 = "", "", ""
           state = 0
           if util1 >= crit:
               state = 2
               label1 = "(!!)"
           elif util1 >= warn:
               state = 1
               label1 = "(!)"
           if util5 >= crit:
               state = 2
               label5 = "(!!)"
           elif util5 >= warn:
               state = max(state,1)
               label5 = "(!)"
           if util15 >= crit:
               state = 2
               label15 = "(!!)"
           elif util15 >= warn:
               state = max(state,1)
               label15 = "(!)"

           perf = [( "util1", util1, warn, crit ),
                   ( "util5", util5, warn, crit ),
                   ( "util15", util15, warn, crit )]


           message = "%d%% 1min%s, %d%% 5min%s, %d%% 15min%s" % \
                     ( util1, label1, util5, label5, util15, label15 )
           return state, message, perf
    return 3, "Information not found in output"

check_info["juniper_cpu"] = {
    "check_function"        : check_juniper_cpu,
    "inventory_function"    : inventory_juniper_cpu,
    "group"                 : "cpu_utilization",
    "service_description"   : "CPU utilization %s",
    "has_perfdata"          : True,
    "snmp_scan_function"    : lambda oid: oid(".1.3.6.1.2.1.1.2.0").startswith(".1.3.6.1.4.1.2636.1.1.1.2"),
    "snmp_info"             : (".1.3.6.1.4.1.2636.3.1.13.1",[
                                                             5, #jnxOperatingDescr
                                                             20, #jnxOperating1MinLoadAvg
                                                             21, #jnxOperating5MinLoadAvg
                                                             22, #jnxOperating15MinLoadAvg
                                                             ])


}
