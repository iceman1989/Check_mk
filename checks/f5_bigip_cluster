#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2014             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.


# Agent / MIB output
# see: 1.3.6.1.4.1.3375.2.1.1.1.1.6.0
# F5-BIGIP-SYSTEM-MIB::sysAttrConfigsyncState (STRING)
# "-1 - uninitialized or disabled config state"

# F5 nodes need to be ntp synced otherwise status reports might be wrong.


def inventory_f5_bigip_cluster(info):
    # run inventory unless we found a device in unconfigured state
    # don't need to loop over the input as there's only one status
    if len(info) == 1 and not ( info[0][0].startswith("-1") or info[0][0] == '' ):
        return [(None, None)]
    return []


def check_f5_bigip_cluster(item, _no_params, info):
    cfgsyncstate = info[0][0]

    # Split the snmp supplied status string to the numeric and textual status
    statusid, statustxt = cfgsyncstate.split(" - ")

    # Possible states:
    # -1    unconfigured,           ok only if original status
    #                               otherwise this would mean something is heavily broken?
    # 0     in sync,                ok
    # 1/2   one system outdated,    warn
    # 3     both systems outdated,  crit   (config split brain)

    if statusid == "0":
        return (0, statustxt)
    elif statusid == "-1":
        return (2, statustxt)
    elif statusid == "1" or statusid == "2":
        return (1, statustxt)
    elif statusid == "3":
        return (2, statustxt)
    else:
        return (3, "unexpected output from SNMP Agent")

check_info["f5_bigip_cluster"] = {
    'check_function':          check_f5_bigip_cluster,
    'inventory_function':      inventory_f5_bigip_cluster,
    'service_description':     'Config Sync status',
    'snmp_info':               ('.1.3.6.1.4.1.3375.2.1.1.1.1', [
        6 # sysAttrConfigsyncState
    ]),
    'snmp_scan_function':      \
     lambda oid: '.1.3.6.1.4.1.3375.2' in oid(".1.3.6.1.2.1.1.2.0") \
        and "big-ip" in oid(".1.3.6.1.4.1.3375.2.1.4.1.0").lower() \
	and int(oid(".1.3.6.1.4.1.3375.2.1.4.2.0").split('.')[0]) < 11,
}
