#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2014             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

def ibm_imm_health_scan(oid):
    if oid('.1.3.6.1.2.1.1.1.0').lower().endswith(" mips") or \
       oid('.1.3.6.1.2.1.1.1.0').lower().endswith(" sh4a"):
        return True
    else:
        return False

def inventory_ibm_imm_health(info):
    if len(info) > 0:
        return [(None, None)]

def check_ibm_imm_health(_no_item, _no_params, info):
    num_alerts = (len(info) - 1) / 3
    infotext = ""
    for i in range(0, num_alerts):
        state = info[num_alerts   + 1 + i][0]
        text  = info[num_alerts*2 + 1 + i][0]
        if infotext != "":
            infotext += ", "
        infotext += "%s(%s)" % (text, state)

    state = info[0][0]
    if state == '255':
        return (0, "no problem found")
    elif state in ['0']:
        return (2, infotext + " - manual log clearing needed to recover state" )
    elif state in ['2']:
        return (2, infotext)
    elif state == ['4']:
        return (1, infotext)
    else:
        return (3, infotext)

check_info["ibm_imm_health"] = {
    'check_function':          check_ibm_imm_health,
    'inventory_function':      inventory_ibm_imm_health,
    'service_description':     'System health',
    'snmp_info':               ('.1.3.6.1.4.1.2.3.51.3.1', ['4']),
    'snmp_scan_function':
            lambda oid: oid('.1.3.6.1.2.1.1.1.0').lower().endswith(" mips") or \
                        oid('.1.3.6.1.2.1.1.1.0').lower().endswith(" sh4a"),
}
