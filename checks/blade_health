#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2014             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

# Example excerpt from SNMP data:
# .1.3.6.1.4.1.2.3.51.2.2.7.1.0  255
# .1.3.6.1.4.1.2.3.51.2.2.7.2.1.1.1  1
# .1.3.6.1.4.1.2.3.51.2.2.7.2.1.2.1  "Good"
# .1.3.6.1.4.1.2.3.51.2.2.7.2.1.3.1  "No critical or warning events"
# .1.3.6.1.4.1.2.3.51.2.2.7.2.1.4.1  "No timestamp"


def inventory_blade_health(info):
    if len(info) == 1:
        return [(None, None, None)]

def check_blade_health(_no_item, _no_params, info):
    state = info[0][0]
    descr = ": " + ", ".join([ line[1] for line in info if len(line) > 1 ])

    if state == "255":
        return (0, "State is good")
    elif state == "2":
        return (2, "State is degraded (non critical)" + descr)
    elif state == "4":
        return (1, "State is degraded (system level)" + descr)
    elif state == "0":
        return (2, "State is critical!" + descr)
    else:
        return (3, "Undefined state code %s%s" % (state, descr))



check_info["blade_health"] = {
    'check_function':          check_blade_health,
    'inventory_function':      inventory_blade_health,
    'service_description':     'Summary health state',
    'snmp_info':               ('.1.3.6.1.4.1.2.3.51.2.2.7', ['1.0', '2.1.3.1']),
    'snmp_scan_function':      \
     lambda oid: re.match('BladeCenter( Advanced)* Management Module', oid(".1.3.6.1.2.1.1.1.0")) != None,
}
