#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2014             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

#
# during inventory we are looking for all temperatures available,
# in this example there are two (index 1 & 2):
#
# EES-POWER-MIB::psTemperature1.0 .1.3.6.1.4.1.6302.2.1.2.7.1
# EES-POWER-MIB::psTemperature2.0 .1.3.6.1.4.1.6302.2.1.2.7.2
#
# the mib is the NetSure_ESNA.mib, which we have received from directly
# from a customer, its named "Emerson Energy Systems (EES) Power MIB"


emerson_temp_default = (40, 50) # warning / critical

def inventory_emerson_temp(info):
    for nr, line in enumerate(info):
        # Device appears to mark missing sensors by temperature value -999999
        if int(line[0])  >= -273000:
            yield nr, "emerson_temp_default"


def check_emerson_temp(item, params, info):
    if len(info) > item:
        if int(info[item][0]) < -273000:
            return 3, "Sensor offline"

        temp = float(info[item][0]) / 1000.0
        return check_temperature(temp, params)

    return 3, "Sensor not found in SNMP data"


check_info['emerson_temp'] = {
  "inventory_function"  : inventory_emerson_temp,
  "check_function"      : check_emerson_temp,
  "service_description" : "Temperature %s",
  "has_perfdata"        : True,
  "group"               : "hw_temperature",
  "snmp_info"           : ( ".1.3.6.1.4.1.6302.2.1.2", ["7"] ),
  "snmp_scan_function"  : lambda oid: oid('.1.3.6.1.4.1.6302.2.1.1.1.0').startswith('Emerson Network Power'),
  "includes"            : [ "temperature.include" ],
}
