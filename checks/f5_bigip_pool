#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2014             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.


# Agent / MIB output
# see: 1.3.6.1.4.1.3375.2.2.5.1.2.1
# F5-BIGIP-LOCAL-MIB::ltmPoolName.              8.80.111.111.108.asci_encoded_str = Pool_NMA
# F5-BIGIP-LOCAL-MIB::ltmPoolMemberCnt.         8.80.111.111.108.95.78.77.65 = 2
# F5-BIGIP-LOCAL-MIB::ltmPoolActiveMemberCnt.   8.80.111.111.108.95.78.77.65 = 0


# warn, crit numbers of pool members
f5_bigip_pool_default_levels = (2, 1)


def inventory_f5_bigip_pool(checkname,info):
# inventorize all pools and their member count
    inventory = []
    for line in info[0]:
        if line[0] != "":
            inventory.append((line[0],"f5_bigip_pool_default_levels"))
    return inventory

def f5_bigip_pool_get_down_members(info, item):
    downs = []
    if len(info) < 2: # no data for pool members
        return
    for line in info[1]:
        if line[0] == item and (line[2] != '4' or line[3] != '4' or line[4] in ('2', '3', '4', '5' )):
            if re.match("\/\S*\/\S*", line[5]):
                host = line[5].split("/")[2]
            else:
                host = line[5]
            downs.append(host+":"+line[1])
    return downs

def check_f5_bigip_pool(item, params, info):
    for line in info[0]:
        if line[0] == item:
            warn, crit = params
            pool_act_members = int(line[1])
            pool_def_members = int(line[2])
            message = "%d of %d members are up" % ( pool_act_members, pool_def_members )
            state = 0
            if pool_act_members == pool_def_members or pool_act_members >= warn:
                state = 0
            elif pool_act_members < crit:
                state = 2
                message += " (warn/crit: %s/%s)" % ( warn, crit )
            elif pool_act_members < warn:
                state = 1
                message += " (warn/crit: %s/%s)" % ( warn, crit )

            if pool_act_members < pool_def_members:
                downs = f5_bigip_pool_get_down_members(info, item)
                message += ", down/disabled nodes: %s" % ", ".join(downs)

            return state, message
    return 3, "unexpected Output from SNMP Agent"

check_info["f5_bigip_pool"] = {
    'check_function'        : check_f5_bigip_pool,
    'group'                 : 'f5_pools',
    'inventory_function'    : inventory_f5_bigip_pool,
    'service_description'   : 'Load Balancing Pool %s',
    'snmp_info'             : [
            ('.1.3.6.1.4.1.3375.2.2.5.1.2.1', [
                    1, # ltmPoolEntry
                    8, # ltmPoolActiveMemberCnt
                    23, # ltmPoolMemberCnt
                ]),
            ('.1.3.6.1.4.1.3375.2.2.5.3.2.1', [
                    1, # ltmPoolMemberPoolName
                    4, # ltmPoolMemberPort
                    10, # ltmPoolMemberMonitorState
                    11, # ltmPoolMemberMonitorStatus
                    13, # ltmPoolMemberSessionStatus
                    19, # ltmPoolMemberNodeName
                ]),
        ],
    'snmp_scan_function':      \
     lambda oid: '.1.3.6.1.4.1.3375.2' in oid(".1.3.6.1.2.1.1.2.0") \
        and "big-ip" in oid(".1.3.6.1.4.1.3375.2.1.4.1.0").lower(),
}
