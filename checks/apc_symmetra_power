#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2014             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

apc_power_default_levels = (20, 1) # warning / critical *below* those levels (Watt)

def inventory_apc_power(info):
    return [ (line[0], "", "apc_power_default_levels") for line in info ]

def check_apc_power(item, params, info):
    warn, crit = params
    for line in info:
        if line[0] == item:
            power = int(line[1])
            perfdata = [ ( "power", power, warn, crit, 0 ) ]
            infotext = "current power: %d W, warn/crit at and below %d/%d W" % \
                (power, warn, crit)

            if power != -1 and power < crit:
                return (2, infotext, perfdata)
            elif power != -1 and power < warn:
                return (1, infotext, perfdata)
            else:
                return (0, infotext, perfdata)

    return (3, "Phase %s not found in SNMP output" % item)


check_info["apc_symmetra_power"] = {
    'check_function':          check_apc_power,
    'inventory_function':      inventory_apc_power,
    'service_description':     'Power phase %s',
    'has_perfdata':            True,
    'group':                   'apc_power',
    'snmp_info':               ('.1.3.6.1.4.1.318.1.1.1.9.3.3.1', ['2.1.1', '7.1.1']),
    'snmp_scan_function':      lambda oid: oid(".1.3.6.1.2.1.1.2.0").startswith(".1.3.6.1.4.1.318.1.3"),
}
