#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2014             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

juniper_mem_default_levels = ( 80.0, 90.0 )

def inventory_juniper_mem(info):
    return [ ( None, "juniper_mem_default_levels" ) ]

def check_juniper_mem(_no_item, params, info):
    usage_kb, mem_size_kb = map(int, info[0]) # Kilobyte
    mem_size = mem_size_kb * 1024
    usage = usage_kb * 1024
    usage_perc = (float(usage_kb) / mem_size_kb) * 100

    warn, crit = params
    warn_kb = (mem_size_kb / 100.0) * warn
    crit_kb = (mem_size_kb / 100.0) * crit
    perf = [( "usage", usage, warn_kb * 1024, crit_kb * 1024, 0, mem_size )]
    message = "Used: %s/%s (%.0f%%)" % \
    ( get_bytes_human_readable(usage), get_bytes_human_readable(mem_size), usage_perc )
    levels = " (warn/crit at %.0f%%/%0.f%%)" % ( warn, crit )
    if usage_perc >= crit:
        return 2, message + levels, perf
    elif usage_perc >= warn:
        return 1, message + levels, perf
    return 0, message, perf

