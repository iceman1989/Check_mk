#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2014             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.


# Environ info looks like
# 50:05:0c:c0:02:20:d1:16 shelf-owned true
# 50:05:0c:c0:02:20:d1:16 temp-sensor-is-ambient  true    false   false
# 50:05:0c:c0:02:20:d1:16 temp-sensor-low-warning 10  10  10
# 50:05:0c:c0:02:20:d1:16 temp-sensor-hi-warning  40  53  53
# 50:05:0c:c0:02:20:d1:16 temp-sensor-hi-critical 50  63  63
# 50:05:0c:c0:02:20:d1:16 temp-sensor-current-temperature 28  33  35
# 50:05:0c:c0:02:20:d1:16 temp-sensor-low-critical 0   0   0
def netapp_api_parse_info_environ(info):
    shelfs = {}
    lines  = iter(info)

    try:
        while True:
            line = lines.next()
            shelf, key, values = line[0], line[1], line[2:]
            shelfs.setdefault(shelf, {})[key] = values
    except StopIteration:
        pass

    return shelfs

# Converts the given info into
# - A config dictionary with config_key as identifier. If the counter_key of the
#   counter section matches the config_key the counter information is merged into
#   the config.
# - With counter_as_key you can specify whether the counter_key entries
#   should used as main keys in the returned dictionary
def netapp_api_convert_info(info, configs = {}, counter_key = None, counter_as_key = False):
    lines = iter(info)
    try:
        is_config          = False
        current_instance   = None
        current_config     = None

        current_counter    = {}
        objects            = {}
        last_config_name   = [""]

        def add_config():
            if current_config == None:
                return
            key = current_config.get(configs.get(current_instance, {}).get("key"))
            if key:
                objects.setdefault(current_instance, {})
                objects[current_instance][key] = current_config
                last_config_name[0] = key

        def add_counter():
            if not current_counter:
                return
            counter_name = current_counter.get(counter_key)
            if not counter_name:
                return

            if counter_as_key:
                objects[counter_name] = current_counter
            elif counter_name in objects[current_instance]:
                objects[current_instance][counter_name]["counters"] = current_counter

        while True:
            line = lines.next()
            if line[0] == "[config_instance]":
                add_counter()
                current_counter = {}
                is_config = True
                current_instance = line[-1]
                continue
            elif line[0] == "[counter_instance]":
                add_config()
                current_config = {}
                is_config      = False
                continue

            if is_config:
                if line[-1] == configs.get(current_instance, {}).get("block-name"):
                    add_config()
                    current_config = {}
                elif current_config != None and len(line) >= 2:
                    key = line[0]
                    if current_config.get(key):
                        continue
                    else:
                        current_config[key] = line[1]
            else: # is counter
                if line[-1] == "---new_counter---":
                    add_counter()
                    current_counter = {}
                elif len(line) == 2:
                    current_counter[line[0]] = line[1]

    except StopIteration:
        add_config()
        add_counter()
        pass

    return objects

