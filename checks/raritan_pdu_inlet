#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2014             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

def parse_raritan_pdu_inlet(info):
    parsed = {}
    for oid_end, availability, sensor_state, value in info:
        if availability == '1':
            phase, sensor_type = oid_end.split('.')[2:4]
            if int(sensor_type) in raritan_pdu_sensor_types:
                parsed.setdefault(phase, {})
                key = raritan_pdu_sensor_types[int(sensor_type)] # get key for elphase.include
                value = float(value)
                if sensor_state in [ '2', '6' ]:
                    state = 2
                elif sensor_state != '4':
                    state = 1
                else:
                    state = 0
                if state:
                    parsed[phase][key] = (value, (state, raritan_pdu_sensor_states[sensor_state]))
                else:
                    parsed[phase][key] = (value, None)

    return parsed



check_info['raritan_pdu_inlet'] = {
  "parse_function"      : parse_raritan_pdu_inlet,
  "inventory_function"  : inventory_elphase,
  "check_function"      : check_elphase,
  "service_description" : "Inlet Phase %s",
  "has_perfdata"        : True,
  "group"               : "el_inphase",
  "snmp_info"           : ( #".1.3.6.1.4.1.13742.6.5.2.4.1.4.1.1",
                            ".1.3.6.1.4.1.13742.6.5.2.4.1",
                                     [ OID_END,
                                       2, # availability
                                       3, # state
                                       4, # value
                            ]),
  "snmp_scan_function"  : lambda oid: oid(".1.3.6.1.2.1.1.2.0") == ".1.3.6.1.4.1.13742.6",
  "includes"            : [ 'raritan_pdu_inlet.include', 'elphase.include' ]
}
