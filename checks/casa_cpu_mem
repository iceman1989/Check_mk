#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2014             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

def parse_casa_info_mem(info):
    entity_names = dict(map(lambda x: [int(x[0]), x[1]], info[0]))
    data = {}
    for idx, entry in enumerate(info[1]):
        entry_nr = int(entry[0])
        data[entity_names[entry_nr]] = {
                                "mem_total"       : info[1][idx][1],
                                "mem_used"        : info[2][idx][1],
                            }
    return data

def inventory_casa_cpu_mem(info):
    data = parse_casa_info_mem(info)
    inventory = []
    for key, value in data.items():
        if value.get("mem_total"):
            inventory.append( (key, {}) )
    return inventory

def check_casa_cpu_mem(item, params, info):
    data = parse_casa_info_mem(info)
    perfdata = []
    if item in data:
        state = 0
        mem_total   = float(data[item]["mem_total"])
        mem_used   = float(data[item]["mem_used"])
        error_text  = ""
        levels_text = ""
        warn, crit = None, None
        if "levels" in params:
            warn, crit = params["levels"]
            if type(warn) == int:
                levels_text = "(levels at %s/%s)" % (
                                get_bytes_human_readable(warn),
                                get_bytes_human_readable(crit),
                            )
                if mem_used > crit:
                    state = 2
                    error_text = "(!!)"
                elif mem_used > warn:
                    state = 1
                    error_text = "(!)"
            else:
                levels_text = "(levels at %s%%/%s%% used)" % (warn, crit)
                perc_used = (mem_used / mem_total) * 100.0
                if perc_used > crit:
                    state = 2
                    error_text = "(!!)"
                elif perc_used > warn:
                    state = 1
                    error_text = "(!)"


        perfdata.append( ("used", mem_used, warn, crit, 0, mem_total) )
        mem_total = get_bytes_human_readable(mem_total, base=1000.0)
        mem_used = get_bytes_human_readable(mem_used, base=1000.0)
        infotext = "Total: %s, Used: %s %s%s" % \
                   (mem_total, mem_used, error_text, levels_text)
        return (state, infotext, perfdata)
    else:
        return (3, "%s not found in snmp output" % item, perfdata)



check_info["casa_cpu_mem"] = {
    "check_function"        : check_casa_cpu_mem,
    "inventory_function"    : inventory_casa_cpu_mem,
    "service_description"   : "Memory %s",
    "has_perfdata"          : True,
    "group"                 : "memory_multiitem",
    "snmp_scan_function"    : lambda oid: oid(".1.3.6.1.2.1.1.2.0").startswith(".1.3.6.1.4.1.20858.2."),
    "snmp_info"             : [
               ( ".1.3.6.1.2.1.47.1.1.1.1.2",        [ OID_END, '' ] ), # Entity descriptions, quite long...
               ( ".1.3.6.1.4.1.20858.10.13.1.1.1.1", [ OID_END, '' ] ), # Total mem
               ( ".1.3.6.1.4.1.20858.10.13.1.1.1.2", [ OID_END, '' ] ), # Total allocated mem
               ( ".1.3.6.1.4.1.20858.10.36.1.1.1.1", [ OID_END, '' ] ), # Installed slot
                              ]
}
