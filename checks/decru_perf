#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2014             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

def inventory_decru_perf(info):
    perf_names = {
       1 : "read (bytes/s)", # readBytesPerSec
       2 : "write (bytes/s)", # writeBytesPerSec
       3 : "operations (/s)", # opsPerSec
       4 : "CIFS read (bytes/s)", # cifs-readBytesPerSec
       5 : "CIFS write (bytes/s)", # cifs-writeBytesPerSec
       6 : "CIFS operations (/s)", # cifs-opsPerSec
       7 : "NFS read (bytes/s)", # nfs-readBytesPerSec
       8 : "NFS write (bytes/s)", # nfs-writeBytesPerSec
       9 : "NFS operations (/s)", # nfs-opsPerSec
    }

    inventory = []
    for index, rate in info:
        def_name = "unknown %s" % index
        name = perf_names.get(int(index), def_name)
        item = "%s: %s" % (index, name)
        inventory.append( ( item, rate, None ) )
    return inventory

def check_decru_perf(item, _no_params, info):
    index, name = item.split(":", 1)
    for perf in info:
        if perf[0] == index:
            rate = int(perf[1])
            return (0, "current rate is %d/s" % rate, [("rate", rate)])

    return (3, "item not found")



check_info["decru_perf"] = {
    'check_function':          check_decru_perf,
    'inventory_function':      inventory_decru_perf,
    'service_description':     'COUNTER %s',
    'has_perfdata':            True,
    'snmp_info':               ('.1.3.6.1.4.1.12962.1.1.2.1.1', [1, 2]),
    'snmp_scan_function':      \
     lambda oid: "datafort" in oid('.1.3.6.1.2.1.1.1.0').lower(),
}
