Title: Modulare Agenten
Component: core
State: open
Date: 2010-12-23 08:40:16
Class: feature

Die Checks sollen den Code für die Agenten selbst mitbringen.
Die Agenten werden dann auf Wunsch dynamisch zusammengebaut.

Eine Idee ist z.B., dass jeder Check sich selbst einklassifiziert
in essential/extended/full. In essential sind nur die
absolut wichtigen Checks enthalten. So kann man dann einen
Agenten einer bestimmten Ausbaustufe bauen.

Umsetzung:

Erstmal die bestehenden Agenten auseinanderpflücken und in
die Checks einbauen. Das gleiche dann auch für den Windows-Agenten
machen. Gemeinsamer kann auch hier evtl. nach win.include geschoben
werden, aber nicht der generelle Rumpfteil.

Dann muss man in Check_MK einen Befehl einbauen, um die Agenten
zu erzeugen: cmk -A. Hier gibt es viele denkbare Aufrufvarianten:

* Angabe des Betriebssystems (windows, linux, aix, hpux, freebsd, solaris).
* Angabe der Wichtigkeit (essential, extended, full).
* beides kombiniert

Die fertigen Agenten gehen dann nach var/check_mk/agents. Im Falle von
Unix sind es die Shellskripten. Im Falle von Windows ist es der Quellcode,
der natürlich erst noch übersetzt werden muss.

Im Buildsystem muss ich jetzt darauf achten, dass bei einem 'make'
auch immer alle Agenten gebaut werden.

Der nächste Schritt wäre dann die Möglichkeit, per main.mk spezifische
Agenten zu bauen, in dem man irgendwie angibt, welche Checks (genauer:
Sektionen) rein sollen. Beispiel:

# Agent 'hirn' ist wie essential, aber ohne fs, aber mit ntp
agents["hirn"] = [ '@essential', '!fs', 'ntp' ]
agents["hirn2"] = [ '@hirn', '!df', 'depp' ]

