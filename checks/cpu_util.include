#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2014             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

# Common file for all (modern) checks that check CPU utilization (not load!)

# Example for check parameters:
# 1. Variant: Tuple (warn, crit). This is legaacy style
# 2. Variant: dictionary:
#
#  param = {
#     "levels" : .... --> compatible with check_levels(), optional
#     "average" : 15 # -> compute average for 15 minutes, optional
#   }

def check_cpu_util(util, params, this_time = None):
    # Convert legacy param style to new dict style
    if this_time == None:
        this_time = time.time()

    if params == None:
        params = {}
    elif type(params) == tuple:
        params = {
            "levels" : params,
        }

    infotext = "%.1f %% used" % util

    # Averaging
    if "average" in params:
        util_avg = get_average("cpu_utilization.avg", this_time, util, params["average"])
        check_against = util_avg
        counter = "avg"
        infotext += ", %dmin average: %.1f %%" % (params["average"], util_avg)
    else:
        check_against = util
        counter = "util"


    levels = params.get("levels")
    if type(levels) == tuple:
        warn, crit = levels # only for perfdata
    else:
        warn, crit = None, None

    state, extrainfo, extraperf = check_levels(check_against, counter, levels)
    if extrainfo:
        infotext += ", " + extrainfo

    perfdata = [ ("util", util, warn, crit, 0, 100) ]
    if "average" in params:
        perfdata.append( ("avg", util_avg, warn, crit, 0, 100) )

    perfdata += extraperf # reference curve for predictive levels
    return state, infotext, perfdata


# This one can handle user, system and wait. values is a list of:
# - 0 - user: normal processes executing in user mode
# - 1 - nice: niced processes executing in user mode
# - 2 - system: processes executing in kernel mode
# - 3 - idle: twiddling thumbs
# - 4 - iowait: waiting for I/O to complete
# - 5 - irq: servicing interrupts
# - 6 - softirq: servicing softirqs
# - 7 - steal: involuntary wait
def check_cpu_util_unix(values, params):
    this_time = int(time.time())
    # Compute jiffi-differences of all relevant counters
    diff_values = []
    n = 0
    global g_counters
    for v in values:
        n += 1
        countername = "cpu.util.%d" % n
        last_time, last_val = g_counters.get(countername, (0, 0))
        diff_values.append(v - last_val)
        g_counters[countername] = (this_time, v)

    sum_jiffies = sum(diff_values) # do not account for steal!
    if sum_jiffies == 0:
        raise MKCounterWrapped("Too short time difference since last check")

    user        = diff_values[0] + diff_values[1] # add user + nice
    system      = diff_values[2] + diff_values[5] + diff_values[6]
    wait        = diff_values[4]
    user_perc   = 100.0 * float(user)   / float(sum_jiffies)
    system_perc = 100.0 * float(system) / float(sum_jiffies)
    wait_perc   = 100.0 * float(wait)   / float(sum_jiffies)
    perfdata = [
          ( "user",   "%.3f" % user_perc ),
          ( "system", "%.3f" % system_perc ),
          ( "wait",   "%.3f" % wait_perc ) ]

    yield 0, "user: %.1f%%, system: %.1f%%" % (user_perc, system_perc), perfdata

    # Handle level on iowait
    state = 0
    if "iowait" in params and params["iowait"] != None:
        warn, crit = params["iowait"]
        if wait_perc >= crit:
            state = 2
        elif wait_perc >= warn:
            state = 1
    yield state, "wait: %.1f%%" % (wait_perc)

    # Total utilization
    util_total_perc = user_perc + system_perc + wait_perc
    state = 0
    levelstext = ""
    if "util" in params:
        warn, crit = params["util"]
        if util_total_perc >= crit:
            state = 2
        elif util_total_perc >= warn:
            state = 1
        else:
            state = 0
        if state:
            levelstext = " (warn/crit at %.1f%%/%.1f%%)" % (warn, crit)

    yield state, "total: %.1f%%" % util_total_perc + levelstext
