#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2014             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

def check_blade_bx_blades(item, no_params, info):
    blade_status_codes = { 1 : "Unknown", 2 : "OK", 3 : "not-present", 4 : "Error", 5 : "Critical", 6 : "Standby" }
    for blade_id, blade_status, blade_serial, blade_name  in info:
        state = 0
        blade_status = saveint(blade_status)
        if blade_id == item:
            if blade_status == 4  or blade_status == 5:
                state = 2

            return (state, "Blade %s %s %s Status %s " % (blade_id, blade_name, blade_serial, blade_status_codes.get(blade_status, 1)))

    return (3, "no data for '%s' in SNMP info" % item)

check_info['blade_bx_blades'] = {
    "check_function" : check_blade_bx_blades,
    "inventory_function" : lambda info: [ (line[0], None) for line in info if int(line[1]) != 3] ,
    "service_description" : "Blade %s",
    "has_perfdata" : False,
    "snmp_info" : (".1.3.6.1.4.1.7244.1.1.1.4.2.1.1", [
                                                      1, # bladeId
                                                      2, # bladestatus
                                                      5, # Serialnumber
                                                      21, # Name
   ]),
   "snmp_scan_function" : lambda oid: "BX600" in oid(".1.3.6.1.2.1.1.1.0") \
                            or oid(".1.3.6.1.2.1.1.2.0") == ".1.3.6.1.4.1.7244.1.1.1",
}
