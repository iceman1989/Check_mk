#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2014             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

# Example SNMP data:
# .1.3.6.1.4.1.1588.2.1.1.1.1.6.0 v4.0.1    Firmware
# .1.3.6.1.4.1.1588.2.1.1.1.1.7.0 1         Status


def inventory_brocade_vdx_status(info):
    return [ ( None, None )]

def check_brocade_vdx_status(_no_item, _no_params, info):
    states = {
        1 : "online",
        2 : "offline",
        3 : "testing",
        4 : "faulty",
    }
    firmware = info[0][0]
    state = saveint(info[0][1])
    message = "State: %s, Firmware: %s" % ( states[state], firmware)
    if state == 1:
        return 0, message
    if state in [ 2, 4 ]:
        return 2, message
    if state == 3:
        return 1, message

check_info["brocade_vdx_status"] = {
    "check_function"        : check_brocade_vdx_status,
    "inventory_function"    : inventory_brocade_vdx_status,
    "service_description"   : "Status",
    # It does not seem to work to exclude several OIDs here, there seem
    # to be too many devices which do not have the needed OIDs. We try
    # another approach: check for existance of the first needed OID
    #not oid('.1.3.6.1.2.1.1.2.0').startswith( ".1.3.6.1.4.1.1588.2.1.1.1"),
    "snmp_scan_function"    : lambda oid: oid('.1.3.6.1.2.1.1.2.0').startswith( ".1.3.6.1.4.1.1588") \
                                          and oid(".1.3.6.1.4.1.1588.2.1.1.1.1.6") != None,
    "snmp_info"             : ( ".1.3.6.1.4.1.1588.2.1.1.1.1", [
                                                                6, # Firmware
                                                                7  # Status
                                                                ]  ),
}

