#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2014             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.
#
# Example Output:
# .1.3.6.1.4.1.5951.4.1.1.41.6.1.1.8.77.103.109.116.32.67.80.85  "Mgmt CPU"
# .1.3.6.1.4.1.5951.4.1.1.41.6.1.1.12.80.97.99.107.101.116.32.67.80.85.32.48  "Packet CPU 0"
# .1.3.6.1.4.1.5951.4.1.1.41.6.1.2.8.77.103.109.116.32.67.80.85  0
# .1.3.6.1.4.1.5951.4.1.1.41.6.1.2.12.80.97.99.107.101.116.32.67.80.85.32.48  0

factory_settings["netscaler_cpu_default_levels"] = {
    "levels" : (90.0, 95.0)
}

def inventory_netscaler_cpu(info):
    for cpu_name, cpu_usage in info:
        yield cpu_name, netscaler_cpu_default_levels

def check_netscaler_cpu(item, params, info):
    warn, crit = params.get("levels")
    for cpu_name, cpu_usage in info:
        cpu_usage = int(cpu_usage)
        if cpu_name == item:
            infotext = "%d%%" % cpu_usage
            perfdata = [ ("load", cpu_usage, warn, crit, 0) ]
            state = 0
            levelstext = ""
            if cpu_usage >= crit:
                state = 2
                levelstext = " (levels at %d/%d)" % (warn,crit)
            elif cpu_usage >= warn:
                state = 1
                levelstext = " (levels at %d/%d)" % (warn,crit)
            infotext += levelstext
            return state, infotext, perfdata

check_info["netscaler_cpu"] = {
    "check_function"          : check_netscaler_cpu,
    "inventory_function"      : inventory_netscaler_cpu,
    "default_levels_variable" : "netscaler_cpu_default_levels",
    "service_description"     : "CPU Utilization %s",
    "has_perfdata"            : True,
    "group"                   : "cpu_utilization_multiitem",
    "snmp_info"               : (".1.3.6.1.4.1.5951.4.1.1.41.6.1", [
                                            1, # nsCPUname
                                            2, # nsCPUusage
                                        ]),
    "snmp_scan_function"      : lambda oid: oid(".1.3.6.1.2.1.1.2.0").startswith(".1.3.6.1.4.1.5951.1"),
}
