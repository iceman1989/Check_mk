#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2014             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

# Possible values for state:
#  Valid values are:
#
#  normal(1):         the environment is good, such as low
#                     temperature.
#
#  warning(2):        the environment is bad, such as temperature
#                     above normal operation range but not too
#                     high.
#
#  critical(3):       the environment is very bad, such as
#                     temperature much higher than normal
#                     operation limit.
#
#  shutdown(4):       the environment is the worst, the system
#                     should be shutdown immediately.
#
#  notPresent(5):     the environmental monitor is not present,
#                     such as temperature sensors do not exist.
#
#  notFunctioning(6): the environmental monitor does not
#                     function properly, such as a temperature
#                     sensor generates a abnormal data like
#                     1000 C.


def inventory_cisco_temp(checktyp, info):
    # Skip sensors with state 5 (not present)
    return [ (name, None)  for (name, state) in info if state != '5' ]

def check_cisco_temp(item, _no_params, info):
    for name, state in info:
        if name == item:
            if state == '1':
                return (0, "status is OK")
            elif state == '2':
                return (1, "status is WARNING")
            elif state == '3':
                return (2, "status is CRITICAL")
            elif state == '4':
                return (2, "status is SHUTDOWN")
            elif state == '5':
                return (3, "sensor not present")
            elif state == '6':
                return (3, "sensor value out of range")
            else:
                return (3, "invalid state '%s'" % state)

    return (3, "sensor not found in SNMP output")

check_info["cisco_temp"] = {
    'check_function':          check_cisco_temp,
    'inventory_function':      inventory_cisco_temp,
    'service_description':     'Temperature %s',
    'snmp_info':               ('.1.3.6.1.4.1.9.9.13.1.3.1', ['2', '6']),
    'snmp_scan_function':      \
     lambda oid: "cisco" in oid(".1.3.6.1.2.1.1.1.0").lower() and \
            not oid(".1.3.6.1.4.1.9.9.13.1.3.1.3.*"),
    'group':                   'temperature_auto',
}
