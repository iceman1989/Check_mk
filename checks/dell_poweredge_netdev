#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2014             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

def inventory_dell_poweredge_netdev(info):
    inventory = []
    for line in info:
        if line[4] != "":
            inventory.append( ( line[4], None ) )
    return inventory

def check_dell_poweredge_netdev(item, _no_params, info):
    di = dict()
    for status, connection_status, di['Product'], cur_mac, fqdd in info:
        if item == fqdd:
            di['MAC'] =  '-'.join( [ "%02X" % ord( c ) for c in cur_mac ] ).strip()
            state_table = {
                "1" : ( "other,", 1 ),
                "2" : ( "unknown,", 1 ),
                "3" : ( "", 0 ),
                "4" : ( "nonCritical,", 1 ),
                "5" : ( "Critical,", 2 ),
                "6" : ( "NonRecoverable,", 2 ),
            }
            connection_table = {
                "1" : ( "connected, ", 0 ),
                "2" : ( "disconnected, ", 2 ),
                "3" : ( "driverBad, ", 2 ),
                "4" : ( "driverDisabled, ", 2 ),
                "10" : ( "hardwareInitializing, ", 2 ),
                "11" : ( "hardwareResetting, ", 2 ),
                "12" : ( "hardwareClosing, ", 2 ),
                "13" : ( "hardwareNotReady, ", 2 ),
            }
            dev_state_txt, dev_state = state_table.get(status, ( "unknown device status,", 2 ))
            conn_state_txt, conn_state = connection_table.get(connection_status, ( "", 0 ))
            state = max(dev_state, conn_state)
            infotext = "%s %s" % (dev_state_txt, conn_state_txt)
            for parameter, value in di.items():
                infotext += "%s: %s, " % ( parameter, value )
            infotext = re.sub(", $","", infotext)

            return state, infotext

    return 3, "network device not found"

check_info["dell_poweredge_netdev"] = {
    "check_function"        : check_dell_poweredge_netdev,
    "inventory_function"    : inventory_dell_poweredge_netdev,
    "service_description"   : "%s",
    "has_perfdata"          : False,
    "snmp_info"             : ( ".1.3.6.1.4.1.674.10892.5.4.1100.90.1", [
                                      #"1", # networkDeviceChassisIndex
                                      #"2", # networkDeviceIndex
                                      "3", # networkDeviceStatus                    0
                                      "4", # networkDeviceConnectionStatus          1
                                      "6", # networkDeviceProductName               2
                                      "15", # networkDeviceCurrentMACAddress        3
                                      #"16", # networkDevicePermanentMACAddress
                                      #"17", # networkDevicePCIBisNumber
                                      #"18", # networkDevicePCIDeviceNumber
                                      #"19", # networkDevicePCIFunctionNumber
                                      #"23", # networkDeviceTOECapabilityFlag
                                      #"27", # networkDeviceSCSICapabilityFlag
                                      #"28", # networkDeviceSCSIEnabled
                                      #"29", # networkDeviceCapabilities
                                      "30", # networkDeviceFQDD                     4
                              ]),
    "snmp_scan_function"    : lambda oid: oid('.1.3.6.1.2.1.1.2.0') == ".1.3.6.1.4.1.674.10892.5",
}

