#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2014             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

# Author: Lars Michelsen <lm@mathias-kettner.de>
# Modified for Dell Sensors By: Chris Bowlby <cbowlby@tenthpowertech.com>

# Tested with Dell PowerConnect 5448 and 5424 models.
# Relevant SNMP OIDs:
# .1.3.6.1.4.1.89.53.15.1.9.1 = INTEGER: 42
# .1.3.6.1.4.1.89.53.15.1.10.1 = INTEGER: ok(1)

# Temperature is in Celcius by default.

# Status codes:
# 1 => ok,
# 2 => unavailable,
# 3 => nonoperational,

# GENERAL MAPS:
dell_powerconnect_temp_status_map = { '1': 'ok', '2': 'unavailable', '3': 'nonoperational' }
dell_powerconnect_temp_status2nagios_map = { 'ok': 0, 'unavailable': 1, 'nonoperational': 2 }
dell_powerconnect_temp_sensor_state_performance_map = { '1': 1, '2': 0, '3': 0 }

# set default value of variable (user can override in main.mk)
dell_powerconnect_temp_default_values = (35, 40)

# Inventory all of the temperature sensors
def inventory_dell_powerconnect_temp(checkname, info):
    inventory = []
    for temp, state in info:
        # use default variable as parameter. Note the quotes!
        inventory.append((None, "dell_powerconnect_temp_default_values"))
    return inventory

# Execute a check against each sensor.
def check_dell_powerconnect_temp(_no_item, params, info):
    warn, crit = params
    sensor_info = ""
    temp_info = ""

    for temp, state in info:
        status = 0
        dell_powerconnect_status = dell_powerconnect_temp_status_map[state]

	if state == 3:
	   sensor_info = "(!!)"

        if int(temp) >= crit:
            status = 2
	    temp_info = "(!!)"

        elif int(temp) >= warn:
            status = 1
	    temp_info = "(!)"
        else:
            status = dell_powerconnect_temp_status2nagios_map[dell_powerconnect_status]

        return (status, 'The temperature sensor is currently (%s)%s, and the current temperature is %s Â°C%s' %
                        (dell_powerconnect_temp_status_map[state], sensor_info, temp, temp_info), [
               ("temperature", int(temp), warn, crit, 0, 200),
               ])

    return (3, "item not found in snmp data")


# Auto-detection of what temperature sensors are active.

check_info["dell_powerconnect_temp"] = {
    'check_function':          check_dell_powerconnect_temp,
    'inventory_function':      inventory_dell_powerconnect_temp,
    'service_description':     'Temperature',
    'has_perfdata':            True,
    'snmp_info':               ('.1.3.6.1.4.1.89.53.15.1', ['9', '10']),
    'snmp_scan_function':      \
     lambda oid: ".1.3.6.1.4.1.674.10895" in oid(".1.3.6.1.2.1.1.2.0"),
    'group':                   'hw_temperature_single',
}
