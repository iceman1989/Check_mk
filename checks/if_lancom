#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2014             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

def fix_if_64_highspeed(info):
    for line in info:
        if type(line[3]) == str: # not yet converted
            line[3] = saveint(line[3]) * 1000000

def if_lancom_convert(info):
    iftab, ssidtab = info
    ssid_dict = dict(ssidtab)
    new_info = []
    for line in iftab:
        if line[20].startswith("Point-2-Point"):
           continue
        else:
            ifName = line[1]

            new_line = line[:-1]
            if line[20].startswith("Logical Network"):
                new_line[1] += " Logical"
                ssid = ssid_dict.get(ifName, "")
                if ssid:
                    new_line[1] += " " + ssid
            new_line[1] = new_line[1].strip()
            new_info.append(new_line)
    return new_info

def inventory_if_lancom(info):
    info = if_lancom_convert(info)
    fix_if_64_highspeed(info)
    return inventory_if_common(info)

def check_if_lancom(item, params, info):
    info = if_lancom_convert(info)
    fix_if_64_highspeed(info)
    return check_if_common(item, params, info)

check_includes['if_lancom'] = [ "if.include" ]
check_info["if_lancom"] = {
    'check_function':          check_if_lancom,
    'inventory_function':      inventory_if_lancom,
    'service_description':     'Interface %s',
    'has_perfdata':            True,
    'snmp_info':               [
      ( ".1.3.6.1.2.1", [
        "2.2.1.1",              # ifIndex                   0
        "31.1.1.1.1",           # ifName (LANCOM has no useful information if Descr)
        "2.2.1.3",              # ifType                    2
        "31.1.1.1.15",          # ifHighSpeed               .. 1000 means 1GBit
        "2.2.1.8",              # ifOperStatus              4
        "31.1.1.1.6",           # ifHCInOctets              5
        "31.1.1.1.7",           # ifHCInUcastPkts           6
        "31.1.1.1.8",           # ifHCInMulticastPkts       7
        "31.1.1.1.9",           # ifHCInBroadcastPkts       8
        "2.2.1.13",             # ifInDiscards              9
        "2.2.1.14",             # ifInErrors               10
        "31.1.1.1.10",          # ifHCOutOctets            11
        "31.1.1.1.11",          # ifHCOutUcastPkts         12
        "31.1.1.1.12",          # ifHCOutMulticastPkts     13
        "31.1.1.1.13",          # ifHCOutBroadcastPkts     14
        "2.2.1.19",             # ifOutDiscards            15
        "2.2.1.20",             # ifOutErrors              16
        "2.2.1.21",             # ifOutQLen                17
        "31.1.1.1.18",          # ifAlias                  18
        "2.2.1.6",              # ifPhysAddress            19
        # Used in order to ignore some logical NICs
        "2.2.1.2",              # ifDescr                  20
      ]),
      ( ".1.3.6.1.4.1.2356.11.1.3.56.1", [1, 3] ) # LANCOM: SSID             21
    ],
    # check if number of network interfaces (IF-MIB::ifNumber.0) is at least 2
    'snmp_scan_function':      \
         lambda oid: "LANCOM" in oid(".1.3.6.1.2.1.1.1.0") and \
                     (not if64_disabled(g_hostname)) and \
                     oid(".1.3.6.1.2.1.31.1.1.1.6.*") != None,
    'group':                   'if',
    'default_levels_variable': 'if_default_levels',
}
