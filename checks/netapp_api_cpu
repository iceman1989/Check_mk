#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2014             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

# <<<netapp_api_cpu:sep(9)>>>
# [counter_instance]      system
# ---new_counter---
# cpu_busy        8362860064
# num_processors  2

netapp_api_cpu_default_levels = (90.0, 95.0)

def inventory_netapp_api_cpu_utilization(info):
    return [ (None, 'netapp_api_cpu_default_levels') ]

def check_netapp_api_cpu_utilization(item, params, info):
    data = dict([line for line in info if len(line) == 2])
    now = time.time()

    cpu_busy = saveint(data["cpu_busy"])
    num_cpus = saveint(data["num_processors"])
    timedif, ticks_per_sec = get_counter("netapp_api_cpu.utilization", now, cpu_busy)
    cpusecs_per_sec = ticks_per_sec / 1000000.0
    used_perc = 100.0 * cpusecs_per_sec

    # Due to timeing invariancies the measured level can become > 100%.
    # This makes users unhappy, so cut it off.
    if used_perc < 0:
        used_perc = 0
    elif used_perc > 100:
        used_perc = 100

    state, infotext, perfdata = check_cpu_util(used_perc, params, now)
    perfdata[0] = perfdata[0][:5] + (num_cpus,)
    infotext += ", %d CPUs" % num_cpus
    return state, infotext, perfdata

check_info["netapp_api_cpu.utilization"] = {
    'check_function'      : check_netapp_api_cpu_utilization,
    'inventory_function'  : inventory_netapp_api_cpu_utilization,
    'service_description' : 'CPU utilization',
    'has_perfdata'        : True,
    'group'               : 'cpu_utilization',
    'includes'            : [ "cpu_util.include" ]
}


