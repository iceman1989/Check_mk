#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2014             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

wut_webtherm_defaultlevels = (30, 35)

def inventory_webtherm(info):
    # line[0] is 1.1, 2.1, 3.1, 6.1, 8.1, 16.1 or 18.1 depending on MIB variant. We chop
    # of the first part in order to get independent of that.
    return [ (line[0].split(".")[1], "wut_webtherm_defaultlevels") for
        line in info if len(line) == 2 ]

def check_webtherm(item, params, info):
    for line in info:
        if line[0].split(".")[1] == item:
            temp = float(line[1].replace(",", "."))
            warn, crit = params
            perfdata = [ ("temp", temp, warn, crit) ]
            infotext = "%.1f C (warn/crit at %.1f/%.1f C)" % (temp, warn, crit)
            if temp >= crit:
                return (2, infotext, perfdata)
            elif temp >= warn:
                return (1, infotext, perfdata)
            else:
                return (0, infotext, perfdata)
    return (3, "No sensor found")

def detect_webtherm(oid):
    return oid(".1.3.6.1.2.1.1.2.0") in \
       [  ".1.3.6.1.4.1.5040.1.2.1",
          ".1.3.6.1.4.1.5040.1.2.2",
          ".1.3.6.1.4.1.5040.1.2.3",
          ".1.3.6.1.4.1.5040.1.2.6",
          ".1.3.6.1.4.1.5040.1.2.7",
          ".1.3.6.1.4.1.5040.1.2.8",
          ".1.3.6.1.4.1.5040.1.2.9",
          ".1.3.6.1.4.1.5040.1.2.16",
          ".1.3.6.1.4.1.5040.1.2.18" ]

check_info["wut_webtherm"] = {
    'check_function':          check_webtherm,
    'inventory_function':      inventory_webtherm,
    'service_description':     'Thermograph Sensor %s',
    'has_perfdata':            True,
    'snmp_info':               ('.1.3.6.1.4.1.5040.1.2',
        ['1', '2', '3', '6', '7', '8', '9', '16', '18'],
        ['1.2.1.1', '1.3.1.1']
    ),
    'snmp_scan_function':      detect_webtherm,
    'group':                   'room_temperature',
}
