Title: JSON-Ausgabe - Multisite Webservice
Component: multisite
Date: 2010-12-21 22:02:56
State: done
Class: feature
Fun: 0
Targetversion: 

Über eine URL-Variable kann man jede View so aufrufen, dass man die Antwort
als JSON bekommt (oder Python oder CSV). Dabei soll auch Sortierung
und Gruppierung und Filterung berücksichtigt sein. Man macht also keinen
direkten Livestatus-Webservice, sondern einen Multisite Webservice. Dieser
ist optimal für NagStaMon geeignet. Inwieweit das auch für NagVis, NagiosBP
usw. geht, ist noch zu überlegen.

Auch offen ist noch, ob man das Ergebnis der Painter ausgibt, oder die
nackten Datenzeilen. Wahrscheinlich wäre letztes besser, weil die Painter
keine Zusatzinformation generieren sondern eher entfernen (z.B. im
Fall der Icons).

Da man dem Aufrufer nicht erlaubt, direkt Livestatus-Header zu senden,
ergeben sich folgende Konsequenzen:

* Der Benutzer kann die Sicherheit nicht aushebeln, sondern nur das 
abrufen, was in der View vorgesehen ist (inklusive Limit)
* Das Addon ist nicht so flexibel und muss ich auf das Vorhandensein
bestimmter Views verlassen.
* Das ermöglicht allerdings dem Admin wieder, durch bestimmte Filter
das zu beeinflussen, was das Addon zu sehen bekommt.

Wenn die Daten also als original-Livestatus-Daten kommen - ohne 
Painter - dann muss man irgendwie die Spalteninformationen mitsenden.
Das könnte man auf zwei Arten machen:

1. Spaltennamen einmal am Anfang als erste Zeile senden (geht bei CSV/JSON/PYTHON)
2. Jede Zeile als Dictionary senden (geht bei JSON/PYTHON).

Nachteil von 2 ist, dass sehr viel redundante Daten über das Netz gehen. Eigentlich
sollte man es gleich von Anfang an deprecaten. 

Bei gruppierten Views kann man die Daten entsprechend auch in der Antwort gruppieren.
Der Aufrufer sollte aber evtl. die Möglichkeit haben, die Darstellung so zu wählen,
dass die Gruppen aufgelöst werden?

Noch eine Variante ist, dass man sich garnicht auf eine feste View bezieht,
sondern alle Daten über URL-Variablen sendet. Das sollte nicht so schwer zu
bauen sein, weil der View-Editor (Try-Modus) das ja sogar schon vorsieht. Dann
ist das Addon wieder Herr der Lage.


2011-10-21 17:33:07: changed state open -> done
Already done in 1.1.10
