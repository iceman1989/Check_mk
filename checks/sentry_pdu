#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2014             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.


def inventory_sentry_pdu(info):
    for line in info:
        yield line[0], int(line[1])

def check_sentry_pdu(item, params, info):
    states = {
        0: "off",
        1: "on",
        2: "offWait",
        3: "onWait",
        4: "offError",
        5: "onError",
        6: "noComm",
    }
    for name, state, power in info:
        if item == name:
            required_state = params
            # The Wato rule returns eighter on or off
            if required_state == 'on':
                required_state = 1
            elif required_state == 'off':
                required_state = 0
            state = int(state)
            power = int(power)
            infotext = "State is %s" % states[state]
            if state  != required_state:
                yield 2, infotext
            else:
                yield 0, infotext

            infotext = "Current consumption %s Watt" % power
            perfdata = [ ('power', power )]
            yield 0, infotext, perfdata
            return

    yield 3, 'Phase information not found'
    return

check_info["sentry_pdu"] = {
    "check_function"        : check_sentry_pdu,
    "inventory_function"    : inventory_sentry_pdu,
    "service_description"   : "Plug %s",
    "group"                 : "plugs",
    "snmp_info"             : ( ".1.3.6.1.4.1.1718.3.2.2.1", [ 3, 5, 12 ] ),
    "snmp_scan_function"    : lambda oid: oid(".1.3.6.1.2.1.1.2.0") == ".1.3.6.1.4.1.1718.3",
}
