#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2014             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.


# TODO: Remove this. Use time.strptime and time.strftime!!
import datetime

# <<<mssql_backup>>>
# MSSQL_SQLEXPRESS test123 1331207325

# Might be None to have no thresholds or a tuple of two ints
# (<warn age in seconds>, <crit age in seconds>)
mssql_backup_default_levels = None

def inventory_mssql_backup(info):
    return [ (line[0] + ' ' + line[1], 'mssql_backup_default_levels')
             for line in info
             if len(line) == 4 ]

def check_mssql_backup(item, params, info):
    for line in info:
        last_backup_date = False
        try:
            inst, tablespace, last_backup_date, last_backup_time = line
        except ValueError:
            inst, tablespace, last_backup_timestamp = line

        if item == inst + ' ' + tablespace:
            if last_backup_date:
                dt = datetime.datetime(*time.strptime(last_backup_date + ' ' + last_backup_time, '%Y-%m-%d %H:%M:%S')[:6])
            else:
                dt = datetime.datetime.fromtimestamp(saveint(last_backup_timestamp))

            state = 0
            # Would be so nice to use delta.total_seconds(). But we must care about python < 2.7
            delta = datetime.datetime.now() - dt
            sec_ago = (delta.microseconds + (delta.seconds + delta.days * 24 * 3600) * 10**6) / 10**6

            if params is not None:
                if sec_ago >= params[1]:
                    state = 2
                elif sec_ago >= params[0]:
                    state = 1
                perfdata = [('seconds', sec_ago, params[0], params[1])]
            else:
                perfdata = [('seconds', sec_ago)]

            return (state, 'Last backup was at %s (%ds ago)' %
                (dt.strftime('%Y-%m-%d %H:%M:%S'), sec_ago), perfdata)

    return (3, 'Tablespace %s could not be found' % item)

check_info['mssql_backup'] = {
    'check_function':      check_mssql_backup,
    'inventory_function':  inventory_mssql_backup,
    'service_description': '%s Backup',
    'has_perfdata':        True,
    'group':               'mssql_backup',
}
