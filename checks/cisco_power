#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2014             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

# .1.3.6.1.4.1.9.9.13.1.5.1.2.1 "removed"
# .1.3.6.1.4.1.9.9.13.1.5.1.2.2 "AC Power Supply"
# .1.3.6.1.4.1.9.9.13.1.5.1.3.1 5
# .1.3.6.1.4.1.9.9.13.1.5.1.3.2 1
# .1.3.6.1.4.1.9.9.13.1.5.1.4.1 1
# .1.3.6.1.4.1.9.9.13.1.5.1.4.2 2

cisco_power_states = ('', 'normal', 'warning', 'critical',
                        'shutdown', 'notPresent', 'notFunctioning')
cisco_power_source = ( '', 'unknown', 'ac', 'dc', 'externalPowerSupply', 'internalRedundant')

def inventory_cisco_power(info):
    for line in info:
        # 5 in line[1] means cisco_power_states = notPresent
        if 'RPS NotExist' not in line[1] and line[2] != '5':
            yield cisco_sensor_item(line[1], line[0]), None

def check_cisco_power(item, no_params, info):
    for sid, textinfo, state, source in info:
        state = int(state)
        source = int(source)
        if cisco_sensor_item(textinfo, sid) == item:
            output = '%s, State: %s, Source: %s' % \
            (textinfo, cisco_power_states[state], cisco_power_source[source])
            if state == 1:
                return 0, "%s" % output
            elif state == 2:
                return 1, "%s" % output
            else:
                return 2, "%s" % output



check_info["cisco_power"] = {
    'check_function':          check_cisco_power,
    'inventory_function':      inventory_cisco_power,
    'service_description':     'Power %s',
    'snmp_info':               ('.1.3.6.1.4.1.9.9.13.1.5.1', [OID_END, 2, 3, 4]),
    'snmp_scan_function':      \
     lambda oid: "cisco" in oid(".1.3.6.1.2.1.1.1.0").lower(),
    "includes"              : ['cisco_sensor_item.include'],
}
