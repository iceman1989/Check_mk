#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2014             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

blade_bx_cpuload_default_levels = ( 5, 20 )

def inventory_blade_bx_load(info):
    if len(info) > 0:
        return [ (None, "blade_bx_cpuload_default_levels")]

def check_blade_bx_load(item, params, info):
    return check_cpu_load_generic(params, [ float(l[2]) for l in info ])

check_info['blade_bx_load'] = {
    "check_function"      : check_blade_bx_load,
    "inventory_function"  : inventory_blade_bx_load ,
    "service_description" : "CPU load",
    "has_perfdata"        : True,
    # Note: I'm not sure if this check is working at all. If yes,
    # then the SNMP implementation of that device must be broken.
    # It would use the same MIB as ucd_snmp_load, but with other
    # semantics. Please compare. Please mail us an cmk --snmpwalk of
    # such a device, if you have one.
    "snmp_info"           : (".1.3.6.1.4.1.2021.10.1", [ 1, 2, 6 ]),
    "snmp_scan_function"  : lambda oid: "BX600" in oid(".1.3.6.1.2.1.1.1.0"),
    "group"               : "cpu_load",
    "includes"            : ["cpu_load.include"],
}
