#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2014             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

blade_bays_module_state = {
 0:   'standby',
 1:   'on',
 2:   'notPresent',
 255: 'notApplicable',
}

def blade_bays_make_item(line):
    # "3.IO Module 5"
    pd, name = line[0].split(".", 1)
    if pd == '2':
        power_domain = 1
    else:
        power_domain = 2
    return "PD%d %s" % (power_domain, name)

def inventory_blade_bays(info):
    # find only modules that are present and switched on or standby
    inventory = []
    for line in info:
        if line[1] in [ '0', '1' ]:
            item = blade_bays_make_item(line)
            inventory.append((item, None))
    return inventory

def check_blade_bays(item, _no_params, info):
    for line in info:
        if item == blade_bays_make_item(line):
            state = saveint(line[1])
            type = line[2].split('(')[0]
            if state == 1:
                return (0, "State %s (Type: %s, ID: %s)" %
                    (blade_bays_module_state.get(state, 'Unhandled'), type, line[3]))
            elif state == 2:
                return (1, "Not present")
            elif state == 3:
                return (1, "Device is switched off")
            elif state == 0:
                return (1, "Device is in standby")
            else:
                return (2, "invalid state %d" % state)
    return (3, "no data for '%s' in SNMP info" % item)

check_info["blade_bays"] = {
    'check_function':          check_blade_bays,
    'inventory_function':      inventory_blade_bays,
    'service_description':     'BAY %s',
    'snmp_info':               (
        ".1.3.6.1.4.1.2.3.51.2.2.10", [
             "2", # powerDomain1
             "3", # powerDomain2
        ], [ "1.1.5", "1.1.6", "1.1.2", "1.1.1" ] ), # BLADE-MIB
    'snmp_scan_function':      \
     lambda oid: re.match('BladeCenter( Advanced)* Management Module', oid(".1.3.6.1.2.1.1.1.0")) != None,
}
