#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2014             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.


# targetstate is 1 (up)

ifoperstatus_monitor_unused = False
ifoperstatus_inventory_porttypes = [ "6" ]

def inventory_ifoperstatus(info):
    inventory = []
    for name, hwtype, operstatus in info:
        if hwtype in ifoperstatus_inventory_porttypes and (ifoperstatus_monitor_unused or operstatus == '1'):
            inventory.append( (name, operstatus, repr(operstatus)) )
    return inventory

def ifoperstatus_statename(st):
    names = { '1': "up", '2': "down" }
    return names.get(st, st)

def check_ifoperstatus(item, targetstate, info):
    for name, hwtype, operstatus in info:
        if item == name:
            operstatus = ifoperstatus_statename(operstatus)
            if not isinstance(targetstate, list):
                targetstate = ifoperstatus_statename(targetstate)
            if operstatus == targetstate or (isinstance(targetstate, list) and operstatus in targetstate):
                return (0, "status is %s" % operstatus)
            elif operstatus == "up":
                return (1, "port used, but should not be")
            else:
                return (2, "status is %s" % operstatus)

    return (3, "interface %s missing" % item)


# Never inventorize automatically. let if/if64 be the default

check_info["ifoperstatus"] = {
    'check_function':          check_ifoperstatus,
    'inventory_function':      inventory_ifoperstatus,
    'service_description':     'Interface %s',
    'snmp_info':               ('.1.3.6.1.2.1.2.2.1', [2, 3, 8]),
    'snmp_scan_function':      lambda oid: False,
}
