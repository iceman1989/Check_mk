#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2013             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

factory_settings["bluecat_ntp"] = {
    "oper_states" : {
        "warning"     : [ 2, 3, 4 ],
        "critical"    : [ 5 ],
    },
    "stratum" : ( 8, 10 ),
}

def inventory_bluecat_ntp(info):
    if len(info) > 0 and info[0][0] != 'NULL':
        return [(None, None)]

def check_bluecat_ntp(item, params, info):
    oper_state, sys_leap, stratum = map(int, info[0])
    oper_states = {
        1 : "running normally",
        2 : "not running",
        3 : "currently starting",
        4 : "currently stopping",
        5 : "fault"

    }

    state = 0
    if oper_state in params['oper_states']['warning']:
        state = 1
    elif oper_state in params['oper_states']['critical']:
        state = 2
    yield state, "Process is %s" % oper_states[oper_state]

    sys_leap_states = {
        0  : 'no Warning',
        1  : 'add second',
        10 : 'subtract second',
        11 : 'Alarm'
    }
    state = 0
    if sys_leap == 11:
        state = 2
    elif sys_leap in [ 1, 10 ]:
        state = 1
    yield state, "Sys Leap: %s" % sys_leap_states[sys_leap]

    warn, crit = params['stratum']
    state = 0
    if stratum >= crit:
        state = 2
    elif stratum >= warn:
        state = 1
    yield state, "Stratum: %s" % stratum

check_info["bluecat_ntp"] = {
    "check_function"            : check_bluecat_ntp,
    "inventory_function"        : inventory_bluecat_ntp,
    "service_description"       : "NTP",
    "default_levels_variable"   : "bluecat_ntp",
    "group"                     : "bluecat_ntp",
    "snmp_scan_function"        : lambda oid: oid(".1.3.6.1.2.1.1.2.0").startswith(".1.3.6.1.4.1.13315"),
    "snmp_info"                 : (".1.3.6.1.4.1.13315.3.1.4.2", [
                                                              '1.1', # bcnNtpSerOperState
                                                              '2.1', # bcnNtpSysLeap
                                                              '2.2', # bcnNtpSysStratum
                                                            ])
}

