#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2013             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

# Example output from agent:
# <<<modbus_value>>>
# 856 1827893 counter active_energy
# 790 11204 gauge active_power

modbus_value_default_levels = ( None, None )
def inventory_modbus_value(info):
    return [ (x[-1], "modbus_value_default_levels") for x in info ]

def check_modbus_value(item, params, info):
    for cid, value, ctype, name in info:
        if name == item:
            value = saveint(value)
            message_end = ""
            if ctype == "gauge":
                now = time.time()
                timedif, value = get_counter( "modbus.value."+name, now, value )
                message_end = "in last %.0fsec " % timedif
            warn, crit = params
            state = 0
            if crit and crit >= value:
                state = 2
                message_end += "(Levels Warning/Critical at %s/%s)"
            if warn and warn >= value:
                state = 1
                message_end += "(Levels Warning/Critical at %s/%s)"
            message = "Current: %.2f %s (%s)" % ( value, message_end, cid )
            return state, message, [ (name, value, warn, crit ) ]

    return 3, "Value not found in Agent output"

check_info["modbus_value"] = {
    "check_function"        : check_modbus_value,
    "inventory_function"    : inventory_modbus_value,
    "service_description"   : "Value %s",
    "has_perfdata"          : True,
    "group"                 : "modbus_value",
}

